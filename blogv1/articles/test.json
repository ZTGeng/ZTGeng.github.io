{
    "title": "",
    "date": "2018-05-24 19:00:12",
    "text": [
        {
            "data": "这事儿说来话长。我最近加了一个技术讨论群，今后准备每周写一些学习笔记。写的东西打算都放在github这里。顺便也想把以前发在微博文章的几篇都搬过来。所以等于是打算用github.io写博客。然而github.io只能提供静态页面服务，所以这件事做起来会比较复杂。"
        },
        {
            "data": "github.io也就是Github Page，它能够展示repo中的静态页面，但没有服务器和数据库可以用，所以不能像真正的博客网站一样在线创建保存文章，也不能实时更新文章列表。我需要在本地将内容创建好，修改文章列表页加入新内容，然后push到线上。我也可以使用一个叫Jekyll的静态页面生成器。它在本地运行一个服务器，像Node.js一样维护整个网站。它的亮点是可以把Markdown文本转化成网页文件，并且根据文本信息安排合适的路径和url，也能自动更新文章列表。当然我还是需要自己push每次的更新。最终我没有用Jekyll，而是自己写了点javascript来实现（一部分）上述需求。主要考虑到我的文章数量不多，也不要求很多的编辑功能。不如自己造点轮子，当作一个学习的过程。"
        },
        {
            "data": "我的设想是将文本使用json格式保存为文件，前端通过url异步加载这些json，渲染到当前页面。避免每篇文章存一个静态网页，否则要修改渲染样式的话会很麻烦（Jekyll可以自动重新生成每个网页，但我就得挨个去改）。之所以存成json是为了简化渲染时的逻辑，把parse文本的逻辑放到编辑的时候，毕竟文章是一次编辑多次打开的。同时手动维护一个文章列表json文件，异步加载列表。"
        },
        {
            "data": "在文章编辑这边，相当于是做个小工具将文本标记上格式、分成段落，转化为json。支持全部Markdown语法太麻烦了，决定偷个懒使用自己定义的标记方法，只要支持少量编辑功能就好，比如斜体加粗、插入代码、插入图片等。当然图片要事先存放到固定的文件夹，通过文件名产生url在页面中打开。"
        },
        {
            "data": "目前完成了50%的样子，可以读取文章了。渲染的逻辑就是一个switch搞定，根据不同type加上不同的html tag。现在的代码长这个样子："
        },
        {
            "type": "code",
            "data": "var jsonToHtml = function(article) {\n    var htmlContent = `&lt;h2 id=&quot;article_title&quot;&gt;${article.title}&lt;/h2&gt;&lt;p id=&quot;artical_date&quot;&gt;${article.date}&lt;/p&gt;&lt;br&gt;`;\n\n    var paragraphs = article.text;\n    paragraphs.forEach(paragraph =&gt; {\n        var str = &quot;&quot;;\n        switch (paragraph.type) {\n            case &quot;head&quot;:\n                str = `&lt;h3&gt;${paragraph.data}&lt;/h3&gt;`\n                break;\n            case &quot;code&quot;:\n                str = `&lt;pre&gt;&lt;code&gt;${paragraph.data}&lt;/code&gt;&lt;/pre&gt;`\n                break;\n            case &quot;image&quot;:\n                str = `&lt;img src=${IMAGES_PATH + paragraph.data}&gt;`\n                break;\n            case &quot;number_list&quot;:\n                str = &quot;&lt;ol&gt;&quot;;\n                paragraph.data.forEach(item =&gt; {\n                    str = str.concat(`&lt;li&gt;${item}&lt;/li&gt;`);\n                });\n                str = str.concat(&quot;&lt;/ol&gt;&quot;);\n                break;\n            case &quot;bullet_list&quot;:\n                str = &quot;&lt;ul&gt;&quot;;\n                paragraph.data.forEach(item =&gt; {\n                    str = str.concat(`&lt;li&gt;${item}&lt;/li&gt;`);\n                });\n                str = str.concat(&quot;&lt;/ul&gt;&quot;);\n                break;\n            case &quot;quote&quot;:\n                str = `&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;${paragraph.data}&lt;/p&gt;&lt;/blockquote&gt;`;\n                break;\n            default:\n                str = `&lt;p&gt;${paragraph.data}&lt;/p&gt;`\n                break;\n        }\n        htmlContent = htmlContent.concat(str);\n    });"
        },
        {
            "data": "从上面代码中也能看出来json文件是什么格式。基本上就是一个段落是一个 { &quot;type&quot;: ..., &quot;data&quot;: ... } 这样。"
        },
        {
            "data": "编辑页面这边只是做了个样子："
        },
        {
            "data": "那些按钮的功能还没有写，所以现在只能手动给文本加上标记。点击“To Json”之后开始parse文本，基本上就是一个while，两个位置标记from和to。from标记当前位置，to尝试寻找一个有效段落的结束，然后将段落转化为json。然后 from = to，寻找下一个段落，直到读完全部文本。部分代码是这样的："
        },
        {
            "type": "code",
            "data": "var parseText = function () {\n    var text = $(&apos;#text-input&apos;).val()\n        .replace(/&#92;&amp;/g, &quot;&amp;amp;&quot;)\n        .replace(/&#92;&#92;/g, &quot;&amp;#92;&quot;)\n        .replace(/&#92;&lt;/g, &quot;&amp;lt;&quot;)\n        .replace(/&#92;&gt;/g, &quot;&amp;gt;&quot;)\n        .replace(/&#92;&quot;/g, &quot;&amp;quot;&quot;)\n        .replace(/&#92;&apos;/g, &quot;&amp;apos;&quot;)\n        .concat(&apos;&#92;n&apos;);\n    var paragraphs = [];\n\n    var from = 0;\n    var to = 0;\n    while (from &lt; text.length) {\n        if (text.charAt(from) === &apos;&#92;n&apos; || text.charAt(from) === &apos; &apos;) {\n            from++;\n        } else if (text.slice(from, from + 4) === &quot;### &quot;) {\n            from += 4;\n            to = from;\n            while (to &lt; text.length &amp;&amp; text.charAt(to) !== &apos;&#92;n&apos;) {\n                to++;\n            }\n            paragraphs.push(parseHead(text.slice(from, to).trim()));\n\n            from = to;\n        } else if (text.slice(from, from + 4) === &quot;```&#92;n&quot;) {\n            from += 4;\n            to = text.indexOf(&quot;&#92;n```&#92;n&quot;, from);\n            if (to === -1) {\n                continue;\n            }\n            paragraphs.push(parseCode(text.slice(from, to)));\n\n            from = to + 4;\n..."
        },
        {
            "data": "最终生成的json字串显示在页面上，拖选、复制、粘贴、保存成本地文件，修改文章列表文件，commit，push，就完成了一篇博客。。。"
        },
        {
            "data": "接下来要持续完成和完善代码。目前的主要任务，一是在文本中添加标记的功能还没开发。二是测试中发现很多edge case会导致转化失败。其中一大类问题是需要将一些字符escape掉，例如“&lt;”、换行符等。Escape所有的“&lt;”和“&gt;”意味着我只能在渲染时添加html tag，否则tag中的“&lt;”和文本中的“&lt;”会无法区分。还有一类问题是源于用户输入格式不正确，虽然目前其实只有一个用户。"
        }
    ]
}